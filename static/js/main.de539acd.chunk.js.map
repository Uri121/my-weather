{"version":3,"sources":["weather.js","form.js","App.js","index.js"],"names":["moment","require","Weather","reading","newDate","Date","weekday","dt","setTime","temp","icon","rangeID","getWeatherIcon","weather","id","className","format","main","Math","floor","description","Form","props","error","role","onSubmit","loadWeather","type","name","placeholder","autoComplete","API_Key","process","App","getWeather","e","a","preventDefault","city","target","elements","value","fetch","api_call","json","response","dailyData","list","filter","dt_txt","includes","setState","fullData","undefined","getWeatherWithLatLng","pos","coords","latitude","longitude","handleCheckbox","checked","check","getLocation","formatDayCards","state","map","index","key","weatherIcon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","navigator","geolocation","getCurrentPosition","this","onChange","htmlFor","style","color","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.de539acd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./weather.css\";\r\nvar moment = require(\"moment\");\r\n\r\nconst Weather = ({ reading }) => {\r\n  let newDate = new Date();\r\n  const weekday = reading.dt * 1000;\r\n  newDate.setTime(weekday);\r\n  const icon = getWeatherIcon(reading.weather[0].id);\r\n\r\n  return (\r\n    <div className=\"col-2 mr-4\">\r\n      <div className=\"card\">\r\n        <h3 className=\"card-header\">{moment(newDate).format(\"dddd\")}</h3>\r\n        <p className=\"text-muted pb-2 pt-2\">\r\n          {moment(newDate).format(\"MMMM Do\")}\r\n        </p>\r\n        <i className={`wi ${icon} display-4`}></i>\r\n        <h3 className=\"pt-4\">{calCelsiuis(reading.main.temp)}&deg;</h3>\r\n        <p className=\"card-text pb-10\">{reading.weather[0].description}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction calCelsiuis(temp) {\r\n  let cell = Math.floor(temp - 275.15);\r\n  return cell;\r\n}\r\n\r\nfunction getWeatherIcon(rangeID) {\r\n  let icon;\r\n  switch (true) {\r\n    case rangeID >= 200 && rangeID <= 232:\r\n      icon = \"wi-thunderstorm\";\r\n      break;\r\n    case rangeID >= 300 && rangeID <= 321:\r\n      icon = \"wi-sleet\";\r\n      break;\r\n    case rangeID >= 500 && rangeID <= 531:\r\n      icon = \"wi-storm-showers\";\r\n      break;\r\n    case rangeID >= 600 && rangeID <= 622:\r\n      icon = \"wi-snow\";\r\n      break;\r\n    case rangeID >= 701 && rangeID <= 781:\r\n      icon = \"wi-fog\";\r\n      break;\r\n    case rangeID === 800:\r\n      icon = \"wi-day-sunny\";\r\n      break;\r\n    case rangeID >= 801 && rangeID <= 804:\r\n      icon = \"wi-day-fog\";\r\n      break;\r\n    default:\r\n      icon = \"wi-day-fog\";\r\n  }\r\n  return icon;\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport \"./form.css\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div>{props.error? error():null}</div>\r\n     \r\n      <form onSubmit={props.loadWeather}>\r\n        <div className=\"row\">\r\n          <div>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              name=\"city\"\r\n              placeholder=\"City\"\r\n              autoComplete=\"on\"\r\n            ></input>\r\n          </div>\r\n          <div className=\"ml-3 text-md-left\">\r\n            <button className=\"btn btn-light\">Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nfunction error() {\r\n  return (\r\n    <div className=\"alert alert-danger max-5\" role=\"alert\">\r\n      Please enter a vaild city\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Weather from \"./weather\";\nimport \"weather-icons/css/weather-icons.css\";\nimport Form from \"./form\";\nimport \"./App.css\";\n\nconst API_Key = process.env.REACT_APP_WEATHER_API_KEY;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      error: false,\n      check: false,\n      weatherIcon: undefined,\n      fullData: [],\n      dailyData: []\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  getWeather = async e => {\n    try {\n      e.preventDefault();\n\n      const city = e.target.elements.city.value;\n\n      const api_call = await fetch(\n        `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_Key}`\n      );\n\n      const response = await api_call.json();\n      const dailyData = response.list.filter(reading =>\n        reading.dt_txt.includes(\"18:00:00\")\n      );\n      this.setState({\n        city: response.city.name,\n        error: false,\n        fullData: response.list,\n        dailyData: dailyData\n      });\n    } catch {\n      this.setState({ error: true, city: undefined });\n    }\n  };\n\n  getWeatherWithLatLng = async pos => {\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?lat=${pos.coords.latitude}&lon=${pos.coords.longitude}&appid=${API_Key}`\n    );\n\n    const response = await api_call.json();\n    const dailyData = response.list.filter(reading =>\n      reading.dt_txt.includes(\"18:00:00\")\n    );\n    this.setState({\n      city: response.city.name,\n      error: false,\n      fullData: response.list,\n      dailyData: dailyData\n    });\n  };\n\n  getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.getWeatherWithLatLng);\n    }\n  }\n\n  handleCheckbox = e => {\n    if (e.target.checked === true) {\n      this.setState({\n        check: e.target.checked\n      });\n      this.getLocation();\n    } else {\n      this.setState({\n        city: undefined,\n        error: false,\n        fullData: [],\n        dailyData: [],\n        check: e.target.checked\n      });\n    }\n  };\n\n  formatDayCards = () => {\n    return this.state.dailyData.map((reading, index) => (\n      <Weather reading={reading} key={index} />\n    ));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"box-1\">\n            <div className=\"custom-control custom-checkbox\">\n              <input\n                type=\"checkbox\"\n                className=\"custom-control-input\"\n                id=\"locationCheck\"\n                onChange={this.handleCheckbox}\n              />\n              <label\n                className=\"custom-control-label\"\n                htmlFor=\"locationCheck\"\n                style={{ color: \"white\" }}\n              >\n                Get Location\n              </label>\n            </div>\n          </div>\n          <div className=\"box-2\">\n            <Form loadWeather={this.getWeather} error={this.state.error} />\n          </div>\n          {this.state.city ? (\n            <h2 className=\"city-header\">{this.state.city}</h2>\n          ) : null}\n          {this.state.city ? (\n            <div className=\"row justify-content-center\">\n              {this.formatDayCards()}\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}