{"version":3,"sources":["weather.js","form.js","App.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","max","minMax","temp_min","temp_max","description","Form","error","role","onSubmit","loadWeather","type","name","placeholder","autoComplete","API_Key","process","REACT_APP_WEATHER_API_KEY","App","getWeather","e","a","preventDefault","target","elements","value","fetch","api_call","json","response","setState","celsius","calCelsiuis","main","temp","weather","getWeatherIcon","id","undefined","getWeatherWithLatLng","pos","coords","latitude","longitude","handleCheckbox","checked","check","getLocation","icon","state","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeID","this","navigator","geolocation","getCurrentPosition","onChange","htmlFor","style","color","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8719ecfc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./weather.css\";\r\n\r\nconst Weather = props => {\r\n  return (\r\n    <div className=\"card text-center\">\r\n      <div className=\"card-header\">\r\n        <h4>{props.city}</h4>\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <h5 className=\"py-2\">\r\n          <i className={`wi ${props.weatherIcon} display-3`}></i>\r\n        </h5>\r\n        {props.temp_celsius ? (\r\n          <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n        ) : null}\r\n        {minMax(props.temp_min, props.temp_max)}\r\n        <h5 className=\"py-3\">{props.description}</h5>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction minMax(min, max) {\r\n  if (max && min) {\r\n    return (\r\n      <h3>\r\n        <span className=\"px-4\">{min}&deg;</span>\r\n        <span className=\"px-4\">{max}&deg;</span>\r\n      </h3>\r\n    );\r\n  }\r\n}\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport \"./form.css\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div>{props.error? error():null}</div>\r\n     \r\n      <form onSubmit={props.loadWeather}>\r\n        <div className=\"row\">\r\n          <div>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              name=\"city\"\r\n              placeholder=\"City\"\r\n              autoComplete=\"on\"\r\n            ></input>\r\n          </div>\r\n          <div className=\"ml-3 text-md-left\">\r\n            <button className=\"btn btn-light\">Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nfunction error() {\r\n  return (\r\n    <div className=\"alert alert-danger max-5\" role=\"alert\">\r\n      Please enter a vaild city\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\nimport Weather from \"./weather\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\nimport Form from \"./form\";\nimport \"./App.css\";\n\nconst API_Key =  process.env.REACT_APP_WEATHER_API_KEY;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false,\n      check:false\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  calCelsiuis(temp) {\n    let cell = Math.floor(temp - 275.15);\n    return cell;\n  }\n\n  getWeatherIcon(icons, rangeID) {\n    switch (true) {\n      case rangeID >= 200 && rangeID <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\n        break;\n      case rangeID >= 300 && rangeID <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle });\n        break;\n      case rangeID >= 500 && rangeID <= 531:\n        this.setState({ icon: this.weatherIcon.Rain });\n        break;\n      case rangeID >= 600 && rangeID <= 622:\n        this.setState({ icon: this.weatherIcon.Snow });\n        break;\n      case rangeID >= 701 && rangeID <= 781:\n        this.setState({ icon: this.weatherIcon.Atmosphere });\n        break;\n      case rangeID === 800:\n        this.setState({ icon: this.weatherIcon.Clear });\n        break;\n      case rangeID >= 801 && rangeID <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n      default:\n        this.setState({ icons: this.weatherIcon.Clouds });\n    }\n  }\n\n  getWeather = async e => {\n    try {\n      e.preventDefault();\n\n      const city = e.target.elements.city.value;\n\n      const api_call = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_Key}`\n      );\n\n      const response = await api_call.json();\n      this.setState({\n        city: response.name,\n        celsius: this.calCelsiuis(response.main.temp),\n        temp_max: this.calCelsiuis(response.main.temp_max),\n        temp_min: this.calCelsiuis(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false\n      });\n      this.getWeatherIcon(this.weatherIcon, response.weather[0].id);\n    } catch {\n      this.setState({ error: true,\n      city:undefined \n    });\n    }\n  };\n\n  getWeatherWithLatLng = async pos => {\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${pos.coords.latitude}&lon=${pos.coords.longitude}&appid=${API_Key}`\n    );\n\n    const response = await api_call.json();\n\n    this.setState({\n      city: response.name,\n      celsius: this.calCelsiuis(response.main.temp),\n      temp_max: this.calCelsiuis(response.main.temp_max),\n      temp_min: this.calCelsiuis(response.main.temp_min),\n      description: response.weather[0].description,\n      error: false\n    });\n    this.getWeatherIcon(this.weatherIcon, response.weather[0].id);\n  };\n\n  getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.getWeatherWithLatLng);\n    }\n  }\n\n  handleCheckbox = e => {\n  \n    if (e.target.checked === true) {\n      this.setState({\n        check:e.target.checked\n      })\n      this.getLocation();\n    }else{\n      this.setState({\n        city: undefined,\n        icon: undefined,\n        main: undefined,\n        celsius: undefined,\n        temp_max: undefined,\n        temp_min: undefined,\n        description: \"\",\n        error: false,\n        check:e.target.checked\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"box-1\">\n            <div className=\"custom-control custom-checkbox\">\n              <input\n                type=\"checkbox\"\n                className=\"custom-control-input\"\n                id=\"locationCheck\"\n                onChange={this.handleCheckbox}\n              />\n              <label\n                className=\"custom-control-label\"\n                htmlFor=\"locationCheck\"\n                style={{ color: \"white\" }}\n              >\n                Get Location\n              </label>\n            </div>\n          </div>\n          <div className=\"box-2\">\n            <Form loadWeather={this.getWeather} error={this.state.error} />\n          </div>\n          {this.state.city ? (\n            <Weather\n              city={this.state.city}\n              temp_celsius={this.state.celsius}\n              temp_max={this.state.temp_max}\n              temp_min={this.state.temp_min}\n              description={this.state.description}\n              weatherIcon={this.state.icon}\n            />\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// <input type=\"checkbox\" onChange={e => this.checkItem(e)}></input>\n//           <span class=\"badge badge-light\">Get Location</span>\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}